/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
'use strict';
var is = require('./is');
var messages_1 = require('./messages');
exports.ResponseError = messages_1.ResponseError;
exports.ErrorCodes = messages_1.ErrorCodes;
var messageReader_1 = require('./messageReader');
var messageWriter_1 = require('./messageWriter');
function createMessageConnection(inputStream, outputStream, logger, client) {
    if (client === void 0) { client = false; }
    var protocolWriter = new messageWriter_1.MessageWriter(outputStream);
    var sequenceNumber = 0;
    var version = '2.0';
    var requestHandlers = Object.create(null);
    var responseHandlers = Object.create(null);
    var eventHandlers = Object.create(null);
    function handleRequest(requestMessage) {
        function reply(resultOrError) {
            var message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError;
            }
            protocolWriter.write(message);
        }
        function replyError(error) {
            var message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            protocolWriter.write(message);
        }
        function replySuccess(result) {
            var message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            protocolWriter.write(message);
        }
        var requestHandler = requestHandlers[requestMessage.method];
        if (requestHandler) {
            try {
                var handlerResult = requestHandler(requestMessage.params);
                var promise = handlerResult;
                if (!promise) {
                    replySuccess({});
                }
                else if (promise.then) {
                    promise.then(function (resultOrError) {
                        reply(resultOrError);
                    }, function (error) {
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error);
                        }
                        else if (error && is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed with message: " + error.message));
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed unexpectedly without providing any details."));
                        }
                    });
                }
                else {
                    reply(handlerResult);
                }
            }
            catch (error) {
                if (error instanceof messages_1.ResponseError) {
                    reply(error);
                }
                else if (error && is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed with message: " + error.message));
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed unexpectedly without providing any details."));
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, "Unhandled method " + requestMessage.method));
        }
    }
    function handleResponse(responseMessage) {
        var key = String(responseMessage.id);
        var responseHandler = responseHandlers[key];
        if (responseHandler) {
            try {
                if (responseMessage.error) {
                    responseHandler.reject(responseMessage.error);
                }
                else if (responseMessage.result) {
                    responseHandler.resolve(responseMessage.result);
                }
                else {
                    responseHandler.resolve(undefined);
                }
                delete responseHandlers[key];
            }
            catch (error) {
                if (error.message) {
                    logger.error("Response handler '" + responseHandler.method + "' failed with message: " + error.message);
                }
                else {
                    logger.error("Response handler '" + responseHandler.method + "' failed unexpectedly.");
                }
            }
        }
    }
    function handleNotification(message) {
        var eventHandler = eventHandlers[message.method];
        if (eventHandler) {
            try {
                eventHandler(message.params);
            }
            catch (error) {
                if (error.message) {
                    logger.error("Notification handler '" + message.method + "' failed with message: " + error.message);
                }
                else {
                    logger.error("Notification handler '" + message.method + "' failed unexpectedly.");
                }
            }
        }
    }
    var callback;
    if (client) {
        callback = function (message) {
            if (messages_1.isReponseMessage(message)) {
                handleResponse(message);
            }
            else if (messages_1.isNotificationMessage(message)) {
                handleNotification(message);
            }
        };
    }
    else {
        callback = function (message) {
            if (messages_1.isRequestMessage(message)) {
                handleRequest(message);
            }
            else if (messages_1.isNotificationMessage(message)) {
                handleNotification(message);
            }
        };
    }
    var connection = {
        sendNotification: function (type, params) {
            var notificatioMessage = {
                jsonrpc: version,
                method: type.method,
                params: params
            };
            protocolWriter.write(notificatioMessage);
        },
        onNotification: function (type, handler) {
            eventHandlers[type.method] = handler;
        },
        dispose: function () {
        },
        listen: function () {
            new messageReader_1.MessageReader(inputStream, callback);
        }
    };
    if (client) {
        connection.sendRequest = function (type, params) {
            return new Promise(function (resolve, reject) {
                var id = sequenceNumber++;
                var requestMessage = {
                    jsonrpc: version,
                    id: id,
                    method: type.method,
                    params: params
                };
                responseHandlers[String(id)] = { method: type.method, resolve: resolve, reject: reject };
                protocolWriter.write(requestMessage);
            });
        };
    }
    else {
        connection.onRequest = function (type, handler) {
            requestHandlers[type.method] = handler;
        };
    }
    inputStream.on('end', function () { return outputStream.end(); });
    inputStream.on('close', function () { return outputStream.end(); });
    return connection;
}
function createServerMessageConnection(inputStream, outputStream, logger) {
    return createMessageConnection(inputStream, outputStream, logger);
}
exports.createServerMessageConnection = createServerMessageConnection;
function createClientMessageConnection(inputStream, outputStream, logger) {
    return createMessageConnection(inputStream, outputStream, logger, true);
}
exports.createClientMessageConnection = createClientMessageConnection;
