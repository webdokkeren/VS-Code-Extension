"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var rawConfig = (function () {
    if (options.config) return options.config;
    if (options.rules) return options;
    return false;
  })();
  var configBasedir = options.configBasedir || process.cwd();

  if (rawConfig) {
    return augmentConfig(rawConfig, configBasedir).then(function (config) {
      return (0, _lodash.merge)(config, options.configOverrides);
    });
  }

  return (0, _cosmiconfig2.default)("stylelint", {
    configPath: _path2.default.resolve(process.cwd(), options.configFile)
  }).then(function (result) {
    return augmentConfig(result.config, _path2.default.dirname(result.filepath));
  }).then(function (augmentedConfig) {
    return options.configOverrides ? (0, _lodash.merge)({}, augmentedConfig, options.configOverrides) : augmentedConfig;
  });
};

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _cosmiconfig = require("cosmiconfig");

var _cosmiconfig2 = _interopRequireDefault(_cosmiconfig);

var _resolveFrom = require("resolve-from");

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _lodash = require("lodash");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function augmentConfig(config, configDir) {
  // Absolutize the plugins here, because here is the place
  // where we know the basedir for this particular config
  var configWithAbsolutePlugins = absolutizePlugins(config, configDir);
  if (!config.extends) {
    return Promise.resolve(configWithAbsolutePlugins);
  }

  var extendLookups = [].concat(config.extends);
  var resultPromise = extendLookups.reduce(function (mergeConfigs, extendLookup) {
    return mergeConfigs.then(function (mergedConfig) {
      return loadExtendedConfig(mergedConfig, extendLookup).then(function (extendedConfig) {
        return (0, _lodash.merge)({}, mergedConfig, extendedConfig);
      });
    });
  }, Promise.resolve((0, _lodash.omit)(config, "extends")));

  return resultPromise;

  // Also returns a Promise ...
  function loadExtendedConfig(config, extendLookup) {
    var extendPath = (0, _resolveFrom2.default)(configDir, extendLookup);
    var extendDir = _path2.default.dirname(extendPath);
    return (0, _cosmiconfig2.default)(null, {
      configPath: extendPath,
      // In case --config was used: do not pay attention to it again
      argv: false
    }).then(function (result) {
      return augmentConfig(result.config, extendDir);
    });
  }
}

// Replace all plugin looksup with absolute paths
function absolutizePlugins(config, configDir) {
  if (!config.plugins) {
    return config;
  }
  return (0, _lodash.assign)({}, config, {
    plugins: config.plugins.map(function (lookup) {
      return getModulePath(configDir, lookup);
    })
  });
}

function getModulePath(basedir, lookup) {
  try {
    return (0, _resolveFrom2.default)(basedir, lookup);
  } catch (e) {
    throw (0, _utils.configurationError)("Could not find \"" + lookup + "\". " + "Do you need a `configBasedir`?");
  }
}