"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require("../../utils");

var ruleName = "block-closing-brace-newline-before";

exports.ruleName = ruleName;
var messages = (0, _utils.ruleMessages)(ruleName, {
  expectedBefore: function expectedBefore() {
    return "Expected newline before \"}\"";
  },
  expectedBeforeMultiLine: function expectedBeforeMultiLine() {
    return "Expected newline before \"}\" of a multi-line block";
  },
  rejectedBeforeMultiLine: function rejectedBeforeMultiLine() {
    return "Unexpected whitespace before \"}\" of a multi-line block";
  }
});

exports.messages = messages;

exports["default"] = function (expectation) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["always", "always-multi-line", "never-multi-line"]
    });
    if (!validOptions) {
      return;
    }

    // Check both kinds of statements: rules and at-rules
    root.walkRules(check);
    root.walkAtRules(check);

    function check(statement) {

      // Return early if blockless or has empty block
      if (!(0, _utils.cssStatementHasBlock)(statement) || (0, _utils.cssStatementHasEmptyBlock)(statement)) {
        return;
      }

      var blockIsMultiLine = !(0, _utils.isSingleLineString)((0, _utils.cssStatementBlockString)(statement));
      var after = statement.raw("after");

      if (typeof after === "undefined") {
        return;
      }

      // We're really just checking whether a
      // newline *starts* the block's final space -- between
      // the last declaration and the closing brace. We can
      // ignore any other whitespace between them, because that
      // will be checked by the indentation rule.
      if (after[0] !== "\n" && after.substr(0, 2) !== "\r\n") {
        if (expectation === "always") {
          (0, _utils.report)({
            message: messages.expectedBefore(),
            node: statement,
            index: statement.toString().length - 2,
            result: result,
            ruleName: ruleName
          });
        } else if (blockIsMultiLine && expectation === "always-multi-line") {
          (0, _utils.report)({
            message: messages.expectedBeforeMultiLine(),
            node: statement,
            index: statement.toString().length - 2,
            result: result,
            ruleName: ruleName
          });
        }
      }
      if (after !== "") {
        if (expectation === "never") {
          (0, _utils.report)({
            message: messages.rejectedBefore(),
            node: statement,
            index: statement.toString().length - 2,
            result: result,
            ruleName: ruleName
          });
        } else if (blockIsMultiLine && expectation === "never-multi-line") {
          (0, _utils.report)({
            message: messages.rejectedBeforeMultiLine(),
            node: statement,
            index: statement.toString().length - 2,
            result: result,
            ruleName: ruleName
          });
        }
      }
    }
  };
};